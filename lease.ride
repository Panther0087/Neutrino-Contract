{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

# base function

func getNumberByKey(address: Address, key: String) = {
    match getInteger(address, key) {
            case a:Int => a
            case _ => 0
    }
}
func getStringByKey(address: Address, key: String) = {
    match getString(address, key) {
            case a:String => a
            case _ => ""
    }
}
func getBooleanByKey(address: Address, key: String) = {
    match getBoolean(address, key) {
            case a:Boolean => a
            case _ => false
    }
}
#end base function


let ListSplitSymbol = "_"

# data store function

let NeutrinoAssetIdKey = "neutrino_asset_id"

let NeutrinoContractKey = "neutrino_contract"

let AccountLeaseTotalPercentKey = "account_lease_percent_total_"
let AccountLeaseNodeKey = "account_nodes_"
let AccountSnapshotLeaseNodeKey = "snapshot_account_nodes_"
let BalanceSnapshotKey = "snapshot_balance_"
let NodeBalanceKey = "node_balance_"

let PriceKey = "price"
let SnapshotPriceKey = "snapshot_price_"
let LeaseBlockKey = "lease_block"
let LeaseBlockWaitKey = "lease_block_wait"
let SettingsAppliedKey = "snapshot_account_nodes_executed_"

func getAccountLeaseTotalPercent(address: String) = getNumberByKey(this, AccountLeaseTotalPercentKey + address)
func getAccountLeaseNode(address: String) = getStringByKey(this, AccountLeaseNodeKey + address)
func isSettingsApplied(address: String, nodeProvider: String, block: Int) = getBooleanByKey(this, SettingsAppliedKey + address + ListSplitSymbol + nodeProvider + ListSplitSymbol + toString(block))

func getAccountSnapshotLeaseNode(address: String, block: Int) = getStringByKey(this,AccountSnapshotLeaseNodeKey + address + ListSplitSymbol + toString(block))
func getBalanceSnapshot(address: String, block: Int) = getNumberByKey(this,BalanceSnapshotKey + address + ListSplitSymbol + toString(block))
func getNodeBalance(address: String, block: Int) = getNumberByKey(this, NodeBalanceKey + address + ListSplitSymbol + toString(block))
func getSnapshotPrice(block: Int) = getNumberByKey(this, SnapshotPriceKey + toString(block))


#end data store function

let ListDataSplitSymbol = "+"
let ApplyBlockTimeout = 10
let NeutrinoContract = addressFromStringValue(getStringByKey(this, NeutrinoContractKey))
let NeutrinoAssetId = fromBase58String(getStringByKey(NeutrinoContract, NeutrinoAssetIdKey))

let price = getNumberByKey(NeutrinoContract, LeaseBlockKey)
let leaseBlock = getNumberByKey(this, LeaseBlockKey)
let leaseBlockWait = getNumberByKey(this, LeaseBlockWaitKey)

@Callable(i)
func lease(nodeProviderAddress: String, percent: Int) = {
    let owner = toString(i.caller)
    let totalPercent = getAccountLeaseTotalPercent(owner)
    if(totalPercent + percent > 100)
        then throw("Total percent more 100")
    else {
        WriteSet([
            DataEntry(AccountLeaseTotalPercentKey + owner, totalPercent + percent),
            DataEntry(AccountLeaseNodeKey, getAccountLeaseNode(owner) + nodeProviderAddress + ListDataSplitSymbol + toString(percent) + ListSplitSymbol)
        ])
    }
}

@Callable(i)
func cancelLease(position: Int) = {
    let owner = toString(i.caller)
    let totalPercent = getAccountLeaseTotalPercent(owner)
    let nodes = getAccountLeaseNode(owner).split(ListSplitSymbol)[position].split(ListDataSplitSymbol)
    let percent = nodes[1]
    let nodeProviderAddress = nodes[0]

    let splitNodesList = getAccountLeaseNode(owner).split(nodeProviderAddress + ListDataSplitSymbol + percent + ListSplitSymbol)
    WriteSet([
        DataEntry(AccountLeaseTotalPercentKey + owner, totalPercent - parseIntValue(percent)),
        DataEntry(AccountLeaseNodeKey + owner, splitNodesList[0] + splitNodesList[1])
    ])
}

@Callable(i)
func snapshotLeaseingSetting(account: String) = {
    WriteSet([DataEntry(AccountSnapshotLeaseNodeKey + account + ListSplitSymbol + toString(leaseBlock + leaseBlockWait), getAccountLeaseNode(account))])
}

@Callable(i)
func snapshotBalance(account: String) = {
    let amount = assetBalance(addressFromStringValue(account), NeutrinoAssetId)
    WriteSet([DataEntry(BalanceSnapshotKey + account + ListSplitSymbol + toString(leaseBlock + leaseBlockWait), amount)])
}

@Callable(i)
func finilizeSnapshots() = {
    if (leaseBlock + leaseBlockWait > height)
        then throw("wait new snapshot (" + toString(leaseBlock + leaseBlockWait) + ")")
    else WriteSet([
        DataEntry(LeaseBlockKey, leaseBlock + leaseBlockWait),
        DataEntry(SnapshotPriceKey + toString(leaseBlock + leaseBlockWait), price)
    ])
}

@Callable(i)
func applySettings(address: String, position: Int) = {
    let snapshotSetting = getAccountSnapshotLeaseNode(address, leaseBlock).split(ListSplitSymbol)[position]
    let nodeProvider = snapshotSetting.split(ListDataSplitSymbol)[0]
    let percent = snapshotSetting.split(ListDataSplitSymbol)[1]
    let snapshotBalance = getBalanceSnapshot(address, leaseBlock)
    
    let nodeBalance = getNodeBalance(nodeProvider, leaseBlock)
    let shapshotPrice = getSnapshotPrice(leaseBlock)

    if (!isSettingsApplied(address, nodeProvider, leaseBlock))
        then throw("settings is applied")
    else if (height > leaseBlock + ApplyBlockTimeout)
        then throw("apply setting time expire (" + toString(leaseBlock + ApplyBlockTimeout) + ")")
    else
        WriteSet([
            DataEntry(NodeBalanceKey + nodeProvider + ListSplitSymbol + toString(leaseBlock), nodeBalance + snapshotBalance/shapshotPrice*100),
            DataEntry(SettingsAppliedKey + address + ListSplitSymbol + nodeProvider + ListSplitSymbol + toString(leaseBlock), true)
        ])
}