{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

#-------------------Base functions----------------------
func getNumberByKey(key: String) = {
    match getInteger(this, key) {
            case a:Int => a
            case _ => 0
    }
}
func getStringByKey(key: String) = {
    match getString(this, key) {
            case a:String => a
            case _ => ""
    }
}
func getBoolByAddressAndKey(address: Address, key: String) = {
     match getBoolean(address, key) {
            case a:Boolean => a
            case _ => false
    }
}
func getStringByAddressAndKey(address: Address, key: String) = {
   match getString(address, key) {
            case a:String => a
            case _ => ""
    }
}
func getNumberByAddressAndKey(address: Address, key: String) = {
    match getInteger(address, key) {
            case a:Int => a
            case _ => 0
    }
}

#-------------------Constants---------------------------
let WAVELET = 100000000
let PAULI = 1000000
#------Order statuses------
let CANCELED = "canceled"
let NEW = "new"
let FILLED = "filled"

#-------------------Constructor-------------------------
let NeutrinoContractKey = "neutrino_contract"

#-------------------Keys--------------------------------
let PriceKey = "price"
let BondAssetIdKey = "bond_asset_id"
let NeutrinoAssetIdKey = "neutrino_asset_id"
let ControlContractKey = "control_contract"
let BalanceLockedkKey = "balance_lock_"
let WavesLockedBalanceKey = BalanceLockedkKey + "waves"
let NeutrinoLockedBalanceKey = BalanceLockedkKey + "neutrino"
let FirstOrderKey = "order_first"
let LastOrderKey = "order_last"

func getRoiByOrderIdKey(orderId: String) = "debug_order_roi_" + orderId

func getOrderPriceKey(orderId: String) = "order_price_" + orderId
func getOrderTotalKey(orderId: String) = "order_total_" + orderId
func getOrderOwnerKey(orderId: String) = "order_owner_" + orderId
func getOrderHeightKey(orderId: String) = "order_height_" + orderId
func getOrderStatusKey(orderId: String) = "order_status_" + orderId
func getOrderFilledTotalKey(orderId: String) = "order_filled_total_" + orderId
func getLastOrderOwnerKey(owner: String) = "last_order_owner_" + owner

func getPrevOrderKey(orderId: String) = "order_prev_" + orderId
func getNextOrderKey(orderId: String) = "order_next_" + orderId


#-------------------Convert functions-------------------
func convertNeutrinoToWaves(amount: Int, price: Int) = fraction(fraction(amount, 100, price),WAVELET, PAULI)
func convertWavesToNeutrino(amount: Int, price: Int) = fraction(fraction(amount, price, 100), PAULI, WAVELET)
func convertWavesToBond(amount: Int, price: Int) = convertWavesToNeutrino(amount, price)

#-------------------Global vars -------------------------
let neutrinoContract = addressFromStringValue(getStringByKey(NeutrinoContractKey))
let controlContract = addressFromStringValue(getStringByAddressAndKey(neutrinoContract, ControlContractKey)) ## The value from neutrino.ride
let liquidationContract = this
let neutrinoAssetId = fromBase58String(getStringByAddressAndKey(neutrinoContract, NeutrinoAssetIdKey)) # Assets ids. The value from neutrino.ride
let bondAssetId = fromBase58String("6nSpVyNH7yM69eg446wrQR94ipbbcmZMU1ENPwanC97g") # NSBT with 6 decimals as USDN does
let firstOrder = getStringByKey(FirstOrderKey)
let lastOrder = getStringByKey(LastOrderKey)

let isBlocked = getBoolByAddressAndKey(controlContract, "is_blocked")

#-------------------Global vars deficit, locked & supply -------------------------
let currentPrice = getNumberByAddressAndKey(controlContract, PriceKey) # The value from control.ride
let neutrinoLockedBalance = getNumberByAddressAndKey(neutrinoContract, NeutrinoLockedBalanceKey) #locked balance from USDN -> WAVES swap
let wavesLockedBalance = getNumberByAddressAndKey(neutrinoContract, WavesLockedBalanceKey) #locked balance from WAVES -> USDN swap
let reserve = wavesBalance(neutrinoContract) - wavesLockedBalance #waves reserves to cover USDN supply
let neutrinoSupply = neutrinoLockedBalance + extract(assetInfo(neutrinoAssetId)).quantity - assetBalance(neutrinoContract, neutrinoAssetId) - assetBalance(liquidationContract, neutrinoAssetId) # supply outside main sc or liquidation contract
let surplus = convertWavesToNeutrino(reserve, currentPrice) - neutrinoSupply


#-------------------Get functions------------------------
func getOrderPrice(id : String) = getNumberByKey(getOrderPriceKey(id))
func getOrderTotal(id : String) = getNumberByKey(getOrderTotalKey(id))
func getOrderOwner(id : String) = getStringByKey(getOrderOwnerKey(id))
func getOrderStatus(id : String) = getStringByKey(getOrderStatusKey(id))
func getOrderFilledTotal(id : String) = getNumberByKey(getOrderFilledTotalKey(id))
func getOrderHeight(id: String) = getNumberByKey(getOrderHeightKey(id))
func getLastOrderOwner(owner: String) = getStringByKey(getLastOrderOwnerKey(owner))
func getPrevOrder(id: String) = getStringByKey(getPrevOrderKey(id))
func getNextOrder(id: String) = getStringByKey(getNextOrderKey(id))

#-------------------Liquidation---------------------------
func internalAddLiquidationOrder(i: Invocation, price: Int, prevOrder: String) = {
    # price - means how SC will execute orders. USDN/NSBT, example: 15 neutrinos / 10 basetokens;
    # i.e. SC is going to buy 10 basetokens for 15 usdn tokens; price = 150 (1.5 * 100)
    # the behaviour of this price is same as roi within auction SC, so almost no changes in the orderbook logic
    let pmt = extract(i.payment);
    let newOrderId = toBase58String(keccak256(toBytes(pmt.amount) + i.caller.bytes + toBytes(height) + i.transactionId))
    
    let nextOrder = getNextOrder(lastOrder)
    let orderStatus = getOrderStatus(lastOrder)
    let owner = toString(i.caller)

    if (isBlocked) 
        then throw("contract is blocked by EMERGENCY SHUTDOWN actions untill reactivation by emergency oracles")
    else if (pmt.assetId != bondAssetId) 
        then throw("can use appropriate neutrino bonds tokens only")
    else if(getOrderOwner(newOrderId) != "")
        then throw("an order is already exists")
    else if(nextOrder != "")
        then throw("nextOrder is not last. Info:" + nextOrder)
    else if(firstOrder != "" && lastOrder == "")
        then throw("invalid last order")
    else if(prevOrder != "" && getOrderStatus(prevOrder) != NEW)
        then throw("prev order status is not new")
    else if (pmt.amount < PAULI)
        then throw("order amount must be higher than 1 NSBT")
    else {
        let nextOrderPrice = getNumberByKey("getPriceByOrderIdKey(nextOrder)")
        let isNextOrderError = if(nextOrder != "" && price >= nextOrderPrice) then true else false;
        let prevOrderPrice = getNumberByKey("getPriceByOrderIdKey(prevOrder)")
        let isPrevOrderError = if(prevOrder != "" && price < prevOrderPrice) then true else false;
        if (isNextOrderError || isPrevOrderError)
            then throw("invalid order isPrevOrderError:" + toString(isPrevOrderError) + " isNextOrderError:" + toString(isNextOrderError))
        else 
            WriteSet([
                DataEntry(getLastOrderOwnerKey(owner), newOrderId),
                DataEntry(getPrevOrderKey(newOrderId), lastOrder),
                DataEntry(getNextOrderKey(lastOrder), if lastOrder == "" then "" else newOrderId),

                DataEntry(FirstOrderKey, if firstOrder == "" then newOrderId else firstOrder),
                DataEntry(LastOrderKey, newOrderId),

                DataEntry(getOrderTotalKey(newOrderId), pmt.amount),
                DataEntry(getOrderOwnerKey(newOrderId), owner),
                DataEntry(getOrderHeightKey(newOrderId), height),
                DataEntry(getOrderStatusKey(newOrderId), NEW),
                DataEntry(getRoiByOrderIdKey(newOrderId), roi)

            ])
    }
}


#-------------------Callable---------------------------
# set 'bonds liquidation order' (bond -> neutrino 1:1 exchange) to the liquidation queue
# [called by user]
@Callable(i)
func addLiquidationOrderWithPrice(price: Int, prevOrder: String) = {
    internalAddLiquidationOrder(i, price, prevOrder)
}

@Callable(i)
func addLiquidationOrder() = {
    internalAddLiquidationOrder(i, 1, lastOrder)
}

# cancel buy bonds order or liquidation order
# [called by user]
@Callable(i)
func cancelOrder(orderId : String) = {
    let owner = getOrderOwner(orderId)
    let amount = getOrderTotal(orderId) - getOrderFilledTotal(orderId)
    
    let nextOrder = getNextOrder(orderId)
    let prevOrder = getPrevOrder(orderId)
    
    if (isBlocked) 
        then throw("contract is blocked by EMERGENCY SHUTDOWN actions untill reactivation by emergency oracles")
    else if(owner != toString(i.caller)) 
        then throw("permission denied")
    else if(getOrderStatus(orderId) != NEW)
        then throw("invalid order status")
    else {
        ScriptResult(
            WriteSet([
                DataEntry(FirstOrderKey, if firstOrder == orderId then nextOrder else firstOrder),
                DataEntry(LastOrderKey, if lastOrder == orderId then prevOrder else lastOrder),

                DataEntry(getNextOrderKey(prevOrder), nextOrder),
                DataEntry(getPrevOrderKey(nextOrder), prevOrder),
                DataEntry(getOrderStatusKey(orderId), CANCELED)
            ]), 
            TransferSet([
                ScriptTransfer(i.caller, amount, bondAssetId)
            ])
        )
    }
}

# executing nsbt -> neutrino 1:1 exchange from the liquidation queue if SC has reached proficit in collateral cap
# it's calling n-times untill all orders from the liquidation queue will be executed during proficit stage
# [called by pacemaker oracles]
@Callable(i)
func liquidateBond() = {
    let liquidationBalance = assetBalance(this, neutrinoAssetId) #paulis
    let surplusPositive = if(surplus <= 0) then 0 else surplus
    let returnAmount = if(surplusPositive >= liquidationBalance) then 0 else liquidationBalance-surplusPositive
    let surplusBond = surplusPositive #integer

    if (isBlocked) 
        then throw("contract is blocked by EMERGENCY SHUTDOWN actions untill reactivation by emergency oracles")
    else if (liquidationBalance == 0)
        then throw("without bonds to liquidate")
    else if(surplusBond > 0) then {
        TransferSet([
            ScriptTransfer(neutrinoContract, returnAmount, neutrinoAssetId)
        ])
    }
    else if(firstOrder == "")
        then throw("empty orderbook")
    else {
        let nextOrder = getNextOrder(firstOrder)
        let filledTotal = getOrderFilledTotal(firstOrder)
        let orderPrice = getOrderPrice(firstOrder)
        let priceWavesByBondCents = fraction(100, 100, orderPrice)
        let roi = getNumberByKey(getRoiByOrderIdKey(firstOrder))

        let orderTotal = getOrderTotal(firstOrder)
        let orderOwner = getOrderOwner(firstOrder)

        let amount = orderTotal-filledTotal;
        let fillableOrderAmount = if(surplusBond >= amount) then amount else surplusBond

        let nbTokensLiquidateCondition = if (surplus > 0) 
            then fraction(surplus, 100, neutrinoSupply) > roi 
            else fraction(surplus, 100, neutrinoSupply) < roi 

        if (!nbTokensLiquidateCondition)
            then throw("innapropriate roi: " + toString(roi))
        else {
            let newStatus = if(surplusBond >= amount) then FILLED else NEW
            ScriptResult(
                WriteSet([
                    DataEntry(getPrevOrderKey(nextOrder), if(newStatus == FILLED) then "" else firstOrder), #if current first order has new status filled so, his prev order is now empty
                    DataEntry(FirstOrderKey, if(newStatus == FILLED) then nextOrder else firstOrder),
                    DataEntry(LastOrderKey, if(newStatus == FILLED && firstOrder == lastOrder) then "" else lastOrder),
                    DataEntry(getOrderFilledTotalKey(firstOrder), filledTotal + fillableOrderAmount),
                    DataEntry(getOrderStatusKey(firstOrder), newStatus)
                ]), 
                TransferSet([
                    ScriptTransfer(addressFromStringValue(orderOwner), fillableOrderAmount, neutrinoAssetId)
                ])
            )
        }
    }
}



@Verifier(tx)
func verify() = {
    let pubKeyAdminsList = [
        "BLEoguzPVKVTfXxxT3W7Rqf8aUm2ggC9Vemd2MQawM2G",
        "FWVffYr2ALmHMejZm3WqeLz6Sdym3gLFGtJn4KTwyU5x",
        "3Wh2LaWcb5gg7K2pPcW3Ep6EAuRBzYkAgrdpt43jTDFa",
        "5WRXFSjwcTbNfKcJs8ZqXmSSWYsSVJUtMvMqZj5hH4Nc"
    ]
    let count =
        (if(sigVerify(tx.bodyBytes, tx.proofs[0], fromBase58String(pubKeyAdminsList[0]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[1], fromBase58String(pubKeyAdminsList[1]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[2], fromBase58String(pubKeyAdminsList[2]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[3], fromBase58String(pubKeyAdminsList[3]))) then 2 else 0)

    count >= 3
}