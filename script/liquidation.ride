{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

#-------------------Base functions----------------------
func getNumberByKey(key: String) = {
    match getInteger(this, key) {
            case a:Int => a
            case _ => 0
    }
}
func getStringByKey(key: String) = {
    match getString(this, key) {
            case a:String => a
            case _ => ""
    }
}
func getStringByAddressAndKey(address: Address, key: String) = {
   match getString(address, key) {
            case a:String => a
            case _ => ""
    }
}
func getNumberByAddressAndKey(address: Address, key: String) = {
    match getInteger(address, key) {
            case a:Int => a
            case _ => 0
    }
}

#-------------------Constants---------------------------
let WAVELET = 100000000
let ORDERSPLITSYMBOL = "_"
let PAULI = 1000000
let PERCENTACCURACY = 1000
let MAXDISCOUNT = 50
#------Order statuses------
let CANCELED = "canceled"
let NEW = "new"
let FILLED = "filled"

#-------------------Constructor-------------------------
let NeutrinoContractKey = "neutrino_contract"

#-------------------Keys--------------------------------
let PriceKey = "price"
let BondAssetIdKey = "bond_asset_id"
let NeutrinoAssetIdKey = "neutrino_asset_id"
let ControlContractKey = "control_contract"
let BalanceLockedkKey = "balance_lock_"
let WavesLockedBalanceKey = BalanceLockedkKey + "waves"
let NeutrinoLockedBalanceKey = BalanceLockedkKey + "neutrino"
let FirstOrderKey = "order_first"
let LastOrderKey = "order_last"

func getOrderPrevKey(orderId: String) = "order_prev_" + orderId
func getOrderNextKey(orderId: String) = "order_next_" + orderId
func getOrderTotalKey(orderId: String) = "order_total_" + orderId
func getOrderOwnerKey(orderId: String) = "order_owner_" + orderId
func getOrderHeightKey(orderId: String) = "order_height_" + orderId
func getOrderStatusKey(orderId: String) = "order_status_" + orderId
func getOrderFilledTotalKey(orderId: String) = "order_filled_total_" + orderId

#-------------------Convert functions-------------------
func convertNeutrinoToWaves(amount: Int, price: Int) = fraction(fraction(amount, 100, price),WAVELET, PAULI)
func convertWavesToNeutrino(amount: Int, price: Int) = fraction(fraction(amount, price, 100), PAULI, WAVELET)
func convertNeutrinoToBond(amount: Int) = amount/PAULI 
func convertBondToNeutrino(amount: Int) = amount*PAULI 
func convertWavesToBond(amount: Int, price: Int) = convertNeutrinoToBond(convertWavesToNeutrino(amount, price))

#-------------------Global vars-------------------------
let neutrinoContract = addressFromStringValue(getStringByKey(NeutrinoContractKey))
let controlContract = addressFromStringValue(getStringByAddressAndKey(neutrinoContract, ControlContractKey)) ## The value from neutrino.ride
let currentPrice = getNumberByAddressAndKey(controlContract, PriceKey) # The value from control.ride
let neutrinoLockedBalance = getNumberByAddressAndKey(neutrinoContract, NeutrinoLockedBalanceKey)
let wavesLockedBalance = getNumberByAddressAndKey(neutrinoContract, WavesLockedBalanceKey)
let neutrinoAssetId = fromBase58String(getStringByAddressAndKey(neutrinoContract, NeutrinoAssetIdKey)) # Assets ids. The value from neutrino.ride
let bondAssetId = fromBase58String(getStringByAddressAndKey(neutrinoContract, BondAssetIdKey))
let reserve = wavesBalance(neutrinoContract) - wavesLockedBalance
let neutrinoSupply = extract(assetInfo(neutrinoAssetId)).quantity - assetBalance(neutrinoContract, neutrinoAssetId) + neutrinoLockedBalance - assetBalance(this, neutrinoAssetId)
let surplus = convertWavesToNeutrino(reserve, currentPrice) - neutrinoSupply
let firstOrder = getStringByKey(FirstOrderKey)
let lastOrder = getStringByKey(FirstOrderKey)

#-------------------Get functions------------------------
func getOrderTotal(id : String) = getNumberByKey(getOrderTotalKey(id))
func getOrderOwner(id : String) = getStringByKey(getOrderOwnerKey(id))
func getOrderStatus(id : String) = getStringByKey(getOrderStatusKey(id))
func getOrderFilledTotal(id : String) = getNumberByKey(getOrderFilledTotalKey(id))
func getOrderPrev(id: String) = getStringByKey(getOrderPrevKey(id))
func getOrderNext(id: String) = getStringByKey(getOrderNextKey(id))
func getOrderHeight(id: String) = getNumberByKey(getOrderHeightKey(id))

#-------------------Callable---------------------------

# set 'bonds liquidation order' (bond -> neutrino 1:1 exchange) to the liquidation queue
# [called by user]
@Callable(i)
func addLiquidationOrder() = {
    let pmt = extract(i.payment);
    let newOrderId = toBase58String(keccak256(toBytes(pmt.amount) + i.caller.bytes + toBytes(height)))
    
    let prevOrder = getOrderPrev(lastOrder)
    let orderStatus = getOrderStatus(lastOrder)

    if (pmt.assetId != bondAssetId) 
        then throw("can use appropriate neutrino bonds tokens only")
    else if(getOrderOwner(newOrderId) != "")
        then throw("an order is already exists")
    else if(prevOrder != "")
        then throw("nextOrder is not last")
    else if(firstOrder != "" && lastOrder == "")
        then throw("invalid last order")
    else if(firstOrder != "" && orderStatus != NEW)
        then throw("last order status is not new")
    else {
        WriteSet([
            DataEntry(getOrderNextKey(newOrderId), lastOrder),
            DataEntry(getOrderPrevKey(lastOrder), newOrderId),

            DataEntry(FirstOrderKey, if firstOrder == "" then newOrderId else firstOrder),
            DataEntry(LastOrderKey, newOrderId),

            DataEntry(getOrderTotalKey(newOrderId), pmt.amount),
            DataEntry(getOrderOwnerKey(newOrderId), toString(i.caller)),
            DataEntry(getOrderHeightKey(newOrderId), height),
            DataEntry(getOrderStatusKey(newOrderId), NEW)
        ])
    }
}

# cancel buy bonds order or liquidation order
# [called by user]
@Callable(i)
func cancelOrder(orderId : String) = {
    let owner = getOrderOwner(orderId)
    let amount = getOrderTotal(orderId) - getOrderFilledTotal(orderId)
    
    let nextOrder = getOrderNext(orderId)
    let prevOrder = getOrderPrev(orderId)
    
    if(owner != toString(i.caller)) 
        then throw("permission denied")
    else if(getOrderStatus(orderId) != NEW)
        then throw("invalid order status")
    else {
        ScriptResult(
            WriteSet([
                DataEntry(FirstOrderKey, if firstOrder == orderId then prevOrder else firstOrder),
                DataEntry(LastOrderKey, if lastOrder == orderId then nextOrder else lastOrder),

                DataEntry(getOrderNextKey(prevOrder), nextOrder),
                DataEntry(getOrderPrevKey(nextOrder), prevOrder),

                DataEntry(getOrderStatusKey(orderId), CANCELED)
            ]), 
            TransferSet([
                ScriptTransfer(i.caller, amount, bondAssetId)
            ])
        )
    }
}

# executing bond -> neutrino 1:1 exchange from the liquidation queue if SC has reached proficit in collateral cap
# it's calling n-times untill all orders from the liquidation queue will be executed during proficit stage
# [called by pacemaker oracles]
@Callable(i)
func liquidateBond() = {
    let surplusBond = convertNeutrinoToBond(surplus)
    let neutrinoBalance = assetBalance(this, neutrinoAssetId)

    let surplusPositive = if(surplus <= 0) then 0 else surplus
    let bondAmount = if(surplusPositive >= neutrinoBalance) then neutrinoBalance else surplusPositive
    let returnAmount = if(surplusPositive >= neutrinoBalance) then 0 else neutrinoBalance-surplusPositive
  
    if(returnAmount == 0 && neutrinoBalance == 0)
        then throw("without surplus")
    else if(surplusBond <= 0 && returnAmount > 0) then {
        TransferSet([
            ScriptTransfer(neutrinoContract, returnAmount, neutrinoAssetId)
        ])
    }
    else if(surplusBond <= 0)
        then throw("there is no proficit on the smart contract now")
    else if(firstOrder == "")
        then throw("empty orderbook")
    else {
        let prevOrder = getOrderPrev(firstOrder)
        let orderTotal = getOrderTotal(firstOrder)
        let orderOwner = getOrderOwner(firstOrder)
        let filledTotal = getOrderFilledTotal(firstOrder)

        let amount = orderTotal-filledTotal;
        let status = if(surplusBond >= amount) then FILLED else NEW
        let newTotal = if(surplusBond >= amount) then amount else surplusBond

        ScriptResult(
            WriteSet([
                DataEntry(getOrderNextKey(prevOrder), if(status == FILLED) then "" else getOrderNext(prevOrder)),
                DataEntry(FirstOrderKey, if(status == FILLED) then prevOrder else firstOrder),
                DataEntry(LastOrderKey, if(status == FILLED && firstOrder == lastOrder) then "" else lastOrder),

                DataEntry(getOrderFilledTotalKey(firstOrder), filledTotal + newTotal),
                DataEntry(getOrderStatusKey(firstOrder), status)
            ]), 
            TransferSet([
                ScriptTransfer(addressFromStringValue(orderOwner), convertBondToNeutrino(newTotal), neutrinoAssetId),
                ScriptTransfer(neutrinoContract, returnAmount, neutrinoAssetId)
            ])
        )
    }
}

@Verifier(tx)
func verify() = {
    let pubKeyAdminsList = [
        "BLEoguzPVKVTfXxxT3W7Rqf8aUm2ggC9Vemd2MQawM2G",
        "FWVffYr2ALmHMejZm3WqeLz6Sdym3gLFGtJn4KTwyU5x",
        "3Wh2LaWcb5gg7K2pPcW3Ep6EAuRBzYkAgrdpt43jTDFa",
        "5WRXFSjwcTbNfKcJs8ZqXmSSWYsSVJUtMvMqZj5hH4Nc"
    ]
    let count =
        (if(sigVerify(tx.bodyBytes, tx.proofs[0], fromBase58String(pubKeyAdminsList[0]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[1], fromBase58String(pubKeyAdminsList[1]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[2], fromBase58String(pubKeyAdminsList[2]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[3], fromBase58String(pubKeyAdminsList[3]))) then 2 else 0)

    count >= 3
}