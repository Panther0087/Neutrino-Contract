
{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

# base function
func getNumberByKey(key: String) = {
    match getInteger(this, key) {
            case a:Int => a
            case _ => 0
    }
}
func getStringByKey(key: String) = {
    match getString(this, key) {
            case a:String => a
            case _ => ""
    }
}
func getBoolByKey(key: String) = {
    match getBoolean(this, key) {
            case a:Boolean => a
            case _ => false
    }
}
func getNumberByAddressAndKey(address: String, key: String) = {
    match getInteger(addressFromStringValue(address), key) {
            case a:Int => a
            case _ => 0
    }
}
func getStringByAddressAndKey(address: String, key: String) = {
    match getString(addressFromStringValue(address), key) {
            case a:String => a
            case _ => ""
    }
}
#end base function

# consts
let LISTSPLITSYMBOL = "_"
let PERCENTACCURACY = 10000
# end consts

#constructor 
let NeutrinoNeutrinoIdKey = "neutrino_asset_id"
let NeutrinoContractKey = "neutrino_contract"
let NodeAddressKey = "node_address"
#end constructor
 
# keys
let BalanceKey = "rpd_balance"
let SyncIndexKey = "rpd_sync_index"
let ProfitKey = "rpd_profit"
let BalanceHistoryKey = "balance_history"
let IsClaimedKey = "is_claimed"

func getUserBalanceHistoryKey(owner: String) = BalanceHistoryKey + "_" + owner
func getUserBalanceKey(owner: String, assetId: String) = BalanceKey + "_" + assetId + "_" + owner
func getUserBalanceKeyByCount(owner: String, count: Int, assetId: String) = getUserBalanceKey(owner, assetId) + "_" + toString(count)
func getIsClaimedKey(owner: String, count: Int) = IsClaimedKey + "_" + owner + "_" + toString(count)

func getContractBalanceKey(assetId: String) = BalanceKey + "_" + assetId
func getSnapshotContractBalanceKey(count: Int, assetId: String) = BalanceKey + "_" + assetId + "_" + toString(count)
func getProfitKey(count: Int) = ProfitKey + "_" + toString(count)

#end keys

#global vars
let nodeAddress = getStringByKey(NodeAddressKey)
let neutrinoContract = getStringByKey(NeutrinoContractKey)
let neutrinoAssetId = fromBase58String(getStringByAddressAndKey(neutrinoContract, NeutrinoNeutrinoIdKey))
let syncIndex = getNumberByAddressAndKey(neutrinoContract, SyncIndexKey)
#end global vars

# get func
func getContractBalance(assetId: String) = getNumberByKey(getContractBalanceKey(assetId))
func getSnapshotContractBalance(count: Int, assetId: String) = getNumberByAddressAndKey(neutrinoContract, getSnapshotContractBalanceKey(count, assetId))
func getProfit(count: Int) = getNumberByAddressAndKey(neutrinoContract, getProfitKey(count))

func getUserBalance(owner : String, assetId: String) = getNumberByKey(getUserBalanceKey(owner, assetId))
func getUserBalanceByCount(owner : String, count: Int, assetId: String) = getNumberByKey(getUserBalanceKeyByCount(owner, count, assetId))
func getUserBalanceHistory(owner: String) = getStringByKey(getUserBalanceHistoryKey(owner))
func isClaimed(owner: String, count: Int) = getBoolByKey(getIsClaimedKey(owner, count))
#end get func

func getHistoryElement(count: Int) = {
     toString(count) + LISTSPLITSYMBOL
}
func addBalanceHistory(history: String, element: String) = {
    history + element
}

@Callable(i)
func lockNeutrino() = {
    let pmt = extract(i.payment)
    if (pmt.assetId != neutrinoAssetId) 
        then throw("can use neutrino")
    else {
        let account = toString(i.caller)
        let assetIdString = toBase58String(value(pmt.assetId))
        let balance = getUserBalance(account, assetIdString) + pmt.amount
        let historyString = getUserBalanceHistory(account)
        let history = historyString.split(LISTSPLITSYMBOL)
        let index = size(history) - 2;
        let newHistory = if(historyString != "" && parseIntValue(history[index]) == syncIndex) 
                        then historyString 
                    else (addBalanceHistory(historyString, getHistoryElement(syncIndex)))
        WriteSet([
            DataEntry(getContractBalanceKey(assetIdString), getContractBalance(assetIdString) + pmt.amount),
            DataEntry(getUserBalanceKey(account, assetIdString), balance),
            DataEntry(getUserBalanceKeyByCount(account, syncIndex, assetIdString), balance),
            DataEntry(getUserBalanceHistoryKey(account), newHistory)
        ])
    }
}

@Callable(i)
func unlockNeutrino(unlockAmount: Int, assetIdString: String) = {
    let account = toString(i.caller)
    let assetId = fromBase58String(assetIdString)
    let balance = getUserBalance(account, assetIdString) - unlockAmount
    if (balance < 0) 
        then throw("invalid amount")
    else if(assetId != neutrinoAssetId)
        then throw("can use neutrino")
    else {
        let historyString = getUserBalanceHistory(account)
        let history = historyString.split(LISTSPLITSYMBOL)
        let index = size(history) - 2;
        let newHistory = if(historyString != "" && parseIntValue(history[index]) == syncIndex) 
                        then historyString 
                     else (addBalanceHistory(historyString, getHistoryElement(syncIndex)))
        ScriptResult(
            WriteSet([
                DataEntry(getContractBalanceKey(assetIdString), getContractBalance(assetIdString) - unlockAmount),
                DataEntry(getUserBalanceKey(account, assetIdString), balance),
                DataEntry(getUserBalanceKeyByCount(account, syncIndex, assetIdString), balance),
                DataEntry(getUserBalanceHistoryKey(account), newHistory)
            ]),
            TransferSet([ScriptTransfer(addressFromStringValue(account), unlockAmount, neutrinoAssetId)])
        )
    }
}

@Callable(i)
func withdraw(profitSyncIndex: Int, historyIndex: Int) = {
    let account = toString(i.caller)
    let historyString = getUserBalanceHistory(account)
    let history = historyString.split(LISTSPLITSYMBOL)
    let lockActual = parseIntValue(history[historyIndex])

    if(isClaimed(account, profitSyncIndex)) 
        then throw("account is claimed rpd_count:" + toString(profitSyncIndex))
    else if(profitSyncIndex < lockActual || (historyIndex + 2 < size(history) && profitSyncIndex >= parseIntValue(history[historyIndex+1]) ))
        then throw("invalid history index")
    else {
        let neutrinoAssetIdString = toBase58String(neutrinoAssetId)
        let balance = getUserBalanceByCount(account, lockActual, neutrinoAssetIdString)
        let sharePercent = balance*PERCENTACCURACY/getSnapshotContractBalance(profitSyncIndex, neutrinoAssetIdString)
        let profit = sharePercent*getProfit(profitSyncIndex)/PERCENTACCURACY
        
        ScriptResult(
            WriteSet([DataEntry(getIsClaimedKey(account, profitSyncIndex), true)]),
            TransferSet([ScriptTransfer(addressFromStringValue(account), profit, neutrinoAssetId)])
        )
    }
}