{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

#-------------------Base functions----------------------
func getNumberByKey(key: String) = {
    match getInteger(this, key) {
            case a:Int => a
            case _ => 0
    }
}
func getStringByKey(key: String) = {
    match getString(this, key) {
            case a:String => a
            case _ => ""
    }
}
func getBoolByAddressAndKey(address: Address, key: String) = {
     match getBoolean(address, key) {
            case a:Boolean => a
            case _ => false
    }
}
func getStringByAddressAndKey(address: Address, key: String) = {
   match getString(address, key) {
            case a:String => a
            case _ => ""
    }
}
func getNumberByAddressAndKey(address: Address, key: String) = {
    match getInteger(address, key) {
            case a:Int => a
            case _ => 0
    }
}

#-------------------Constants---------------------------
let WAVELET = 100000000
let PAULI = 1000000
let MAXDISCOUNT = 50
#------Order statuses------
let CANCELED = "canceled"
let NEW = "new"
let FILLED = "filled"

#-------------------Constructor-------------------------
let NeutrinoContractKey = "neutrino_contract"

#-------------------Keys--------------------------------
let PriceKey = "price"
let NeutrinoAssetIdKey = "neutrino_asset_id"
let ControlContractKey = "control_contract"
let BalanceLockedkKey = "balance_lock_"
let WavesLockedBalanceKey = BalanceLockedkKey + "waves"
let NeutrinoLockedBalanceKey = BalanceLockedkKey + "neutrino"
let FirstOrderKey = "order_first"
let LastOrderKey = "order_last"

func getOrderPriceKey(orderId: String) = "order_price_" + orderId
func getOrderNextKey(orderId: String) = "order_next_" + orderId
func getOrderTotalKey(orderId: String) = "order_total_" + orderId
func getOrderOwnerKey(orderId: String) = "order_owner_" + orderId
func getOrderStatusKey(orderId: String) = "order_status_" + orderId
func getOrderFilledTotalKey(orderId: String) = "order_filled_total_" + orderId

#-------------------Global vars -------------------------
let neutrinoContract = addressFromStringValue(getStringByKey(NeutrinoContractKey))
let firstOrder = getStringByKey(FirstOrderKey)
let lastOrder = getStringByKey(LastOrderKey)

#-------------------Get functions------------------------
func getOrderNext(id: String) = getStringByKey(getOrderNextKey(id))
func getOrderTotal(id : String) = getNumberByKey(getOrderTotalKey(id))
func getOrderOwner(id : String) = getStringByKey(getOrderOwnerKey(id))
func getOrderStatus(id : String) = getStringByKey(getOrderStatusKey(id))
func getOrderFilledTotal(id : String) = getNumberByKey(getOrderFilledTotalKey(id))


#-------------------Callable---------------------------

# NSBT to SON liquidation orders migration method (temporary method)
# [called by pacemaker]
@Callable(i)
func migrationOrdersNSBTtoSON() = {
    let keyLastMigratedOrder = "lastMigratedOrderId_migration_SON"
    let finalStatus = "migrated_to_SON"
    let isLastMigratedAsFirstOrder = getStringByKey(keyLastMigratedOrder) == ""
    let lastMigratedOrderId = getStringByKey(keyLastMigratedOrder)
    let currentOrderId = if(isLastMigratedAsFirstOrder) then firstOrder else getOrderNext(lastMigratedOrderId)
    let keyStatusLiquidationMigration = "status_migration_SON_" + currentOrderId
    let orderAmount = getOrderTotal(currentOrderId) - getOrderFilledTotal(currentOrderId)
    let orderOwner = addressFromStringValue(getOrderOwner(currentOrderId))
    let orderStatus = getOrderStatus(currentOrderId)
    let migrationStatus = getStringByKey(keyStatusLiquidationMigration)
    if(orderAmount <= 0 || orderStatus != NEW)
        then throw("error: invalid order")
    else if (migrationStatus == finalStatus)
        then throw("error: order has already migrated" )
    else if (getStringByAddressAndKey(neutrinoContract, keyStatusLiquidationMigration) != finalStatus)
        then throw("error: order has not migrated in neutrino sc")
    else if (lastOrder == lastMigratedOrderId)
        then throw("status ok: all order has already migrated or nothing to migrate")
    else WriteSet([
            DataEntry(keyStatusLiquidationMigration, finalStatus),
            DataEntry(keyLastMigratedOrder, currentOrderId),
            DataEntry(getOrderPriceKey(currentOrderId), 100)
        ])
}

@Verifier(tx)
func verify() = {
    let pubKeyAdminsList = [
        "BLEoguzPVKVTfXxxT3W7Rqf8aUm2ggC9Vemd2MQawM2G",
        "FWVffYr2ALmHMejZm3WqeLz6Sdym3gLFGtJn4KTwyU5x",
        "3Wh2LaWcb5gg7K2pPcW3Ep6EAuRBzYkAgrdpt43jTDFa",
        "5WRXFSjwcTbNfKcJs8ZqXmSSWYsSVJUtMvMqZj5hH4Nc"
    ]
    let count =
        (if(sigVerify(tx.bodyBytes, tx.proofs[0], fromBase58String(pubKeyAdminsList[0]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[1], fromBase58String(pubKeyAdminsList[1]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[2], fromBase58String(pubKeyAdminsList[2]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[3], fromBase58String(pubKeyAdminsList[3]))) then 2 else 0)

    count >= 3
}