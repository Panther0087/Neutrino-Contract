{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
#
# Smart Contract for Price Oracles and Emergency Oracles of Neutrino Protocol
#  

#-------------------Base functions----------------------
func getNumberByKey(key: String) = {
    match getInteger(this, key) {
            case a:Int => a
            case _ => 0
    }
}
func getStringByKey(key: String) = {
    match getString(this, key) {
            case a:String => a
            case _ => ""
    }
}
func getBoolByKey(key: String) = {
    match getBoolean(this, key) {
            case a:Boolean => a
            case _ => false
    }
}
func getNumberByAddressAndKey(address: Address, key: String) = {
    match getInteger(address, key) {
            case a:Int => a
            case _ => 0
    }
}
func getStringByAddressAndKey(address: Address, key: String) = {
     match getString(address, key) {
            case a:String => a
            case _ => ""
    }
}

func dropElementInJsonArray(array: String, element: String) = {
    let splitedArray = array.split(element)
    if(splitedArray[1].take(1) == ",") then
        splitedArray[0] + splitedArray[1].drop(1)
    else
        splitedArray[0].dropRight(1) + splitedArray[1]
}
func convertJsonArrayToList(jsonArray: String) = {
   jsonArray.split(",") #jsonArray.take(size(jsonArray)-1).drop(1).split(",")
}

#-------------------Constants--------------------------- 
let BLOCK = "block"
let UNBLOCK = "unblock"
let UPDATE = "update"

#-------------------Constructor-------------------------
let OraclesKey = "oracles"
let AdminsKey = "admins"
let VoteIntervalKey = "vote_interval"
let CoefficientOracleKey = "coefficient_oracle"
let CoefficientAdminKey = "coefficient_admin"
let ScriptUpdateIntervalKey = "script_update_interval"
let PriceOffsetKey = "price_offset"

#-------------------Keys---------------------------------
#------This contract----------
let PriceKey = "price"
let IsBlockedKey = "is_blocked"
let BlockExpireVoteKey = "vote_expire_block"
let ScriptUpdateBlockKey = "script_update_block"
let PriceIndexKey = "price_index"

func getAdminVoteKey(owner: String) = "admin_vote_" + owner
func getAdminVoteActionKey(owner: String) = getAdminVoteKey(owner) + "_" + "action"
func getBlackSwarmPriceKey(block: Int) = "black_swarm_price" + "_" + toString(block)
func getPriceHistoryKey(block: Int) = PriceKey + "_" + toString(block)
func getHeightPriceByIndexKey(index: Int) = PriceIndexKey + "_" + toString(index)
func getOracleProvidePriceKey(height: Int) = "price_" + toString(height)

#-------------------Global vars-------------------------
let price = getNumberByKey(PriceKey)
let priceIndex = getNumberByKey(PriceIndexKey)
let blockExpireVote = getNumberByKey(BlockExpireVoteKey)
let scriptUpdateBlock = getNumberByKey(ScriptUpdateBlockKey)
let scriptUpdateInterval = getNumberByKey(ScriptUpdateIntervalKey)
let isBlocked = getBoolByKey(IsBlockedKey)
let bftCoefficientOracle = getNumberByKey(CoefficientOracleKey)
let bftCoefficientAdmin = getNumberByKey(CoefficientAdminKey)
let percentPriceOffset = getNumberByKey(PriceOffsetKey)
let voteInterval = getNumberByKey(VoteIntervalKey)
let oracles = getStringByKey(OraclesKey)
let admins = getStringByKey(AdminsKey)
let oraclesList = convertJsonArrayToList(oracles) 
let adminsList = convertJsonArrayToList(admins) 

#-------------------Get func----------------------------
func getAdminVoteAction(owner: String) = getStringByKey(getAdminVoteActionKey(owner))
func getOracleProvideHeight(owner: String, height: Int) = getNumberByAddressAndKey(addressFromStringValue(owner), getOracleProvidePriceKey(height))

#-------------------Other func--------------------------
func isOracle(address: String) = {
    isDefined(indexOf(oracles, address))
}
func isAdmin(address: String) = {
    isDefined(indexOf(admins, address))
}

#-------------------Fold func--------------------------
func filterAdminsVoteByAction(result: List[String], address: String, action: String) = 
   address :: result

func filterAdminsVoteByBlockAction(result: List[String], address: String) =
   filterAdminsVoteByAction(result, address, BLOCK)

func filterAdminsVoteByUnblockAction(result: List[String], address: String) =
   filterAdminsVoteByAction(result, address, UNBLOCK)

func filterAdminsVoteByUpdateAction(result: List[String], address: String) =
   filterAdminsVoteByAction(result, address, UPDATE)

#-------------------Callable----------------------

# [called by price oracles]
@Callable(i)
func finalizeCurrentPrice() = {        
    let prices = [
        getOracleProvideHeight(oraclesList[0], height),
        getOracleProvideHeight(oraclesList[1], height),
        getOracleProvideHeight(oraclesList[2], height),
        getOracleProvideHeight(oraclesList[3], height),
        getOracleProvideHeight(oraclesList[4], height)
    ]                  

    let priceProvidingCount = 
        if(prices[0] != 0) then 1 else 0 +
        if(prices[1] != 0) then 1 else 0 + 
        if(prices[2] != 0) then 1 else 0 +
        if(prices[3] != 0) then 1 else 0 +
        if(prices[4] != 0) then 1 else 0

    let priceSum = prices[0] + prices[1] + prices[2] + prices[3] + prices[4]
    let newPrice = priceSum/priceProvidingCount

    if(isBlocked)
        then throw("contract is blocked")
    else if(priceProvidingCount < bftCoefficientOracle)
        then throw("3/5 oracles need to set a price")
    else if(newPrice >= (price + price*percentPriceOffset/100) || newPrice <= (price - price*percentPriceOffset/100)) then {
        WriteSet([
            DataEntry(IsBlockedKey, true),
            DataEntry(getBlackSwarmPriceKey(height), newPrice)
        ])
    }
    else {
        let newPriceIndex = priceIndex + 1
        WriteSet([
            DataEntry(PriceKey, newPrice),
            DataEntry(getPriceHistoryKey(height), newPrice),
            DataEntry(PriceIndexKey, newPriceIndex),
            DataEntry(getHeightPriceByIndexKey(newPriceIndex), height)
        ])
    }
}

# [called by emergency oracles]
@Callable(i)
func vote(action: String) = {
    let account = toString(i.caller)
    let adminsListWithoutAccount = convertJsonArrayToList(dropElementInJsonArray(admins, account))
    let lastAction = getAdminVoteAction(account)

    let blockVotes = FOLD<5>(adminsListWithoutAccount, [], filterAdminsVoteByBlockAction)
    let unblockVotes = FOLD<5>(adminsListWithoutAccount, [], filterAdminsVoteByUnblockAction)
    let updateVotes = FOLD<5>(adminsListWithoutAccount, [], filterAdminsVoteByUpdateAction)

    let blockVoteCount = size(blockVotes) + if( action == BLOCK) then 1 else 0
    let unblockVoteCount = size(unblockVotes) + if( action == UNBLOCK) then 1 else 0
    let updateVotesCount = size(updateVotes) + if( action == UPDATE) then 1 else 0

    let resetResult = [
        DataEntry(BlockExpireVoteKey, 0),
        DataEntry(getAdminVoteActionKey(adminsListWithoutAccount[0]), ""),
        DataEntry(getAdminVoteActionKey(adminsListWithoutAccount[1]), ""),
        DataEntry(getAdminVoteActionKey(adminsListWithoutAccount[2]), ""),
        DataEntry(getAdminVoteActionKey(adminsListWithoutAccount[3]), "")
    ]
    if(blockVoteCount >= bftCoefficientAdmin || unblockVoteCount >= bftCoefficientAdmin) then {
        WriteSet(
            cons(DataEntry(IsBlockedKey, if(blockVoteCount >= bftCoefficientAdmin) then true else false), resetResult)
        )
    }
    else if(updateVotesCount > bftCoefficientAdmin) then {
        WriteSet(
            cons(DataEntry(ScriptUpdateBlockKey, if(updateVotesCount > bftCoefficientAdmin) then height + scriptUpdateInterval else scriptUpdateBlock), resetResult)
        )
    }
    else {
        WriteSet([
            DataEntry(BlockExpireVoteKey, if(height > blockExpireVote) then height + voteInterval else blockExpireVote),
            DataEntry(getAdminVoteActionKey(account), action)
        ])
    }
}
