{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
#
# Smart Contract for Price Oracles and Emergency Oracles of Neutrino Protocol
#

#-------------------Base functions----------------------
func getNumberByKey(key: String) = {
    match getInteger(this, key) {
            case a:Int => a
            case _ => 0
    }
}
func getBoolByKey(key: String) = {
    match getBoolean(this, key) {
            case a:Boolean => a
            case _ => false
    }
}
func getNumberByAddressAndKey(address: Address, key: String) = {
    match getInteger(address, key) {
            case a:Int => a
            case _ => 0
    }
}

func convertJsonArrayToList(jsonArray: String) = {
   jsonArray.split(",") #jsonArray.take(size(jsonArray)-1).drop(1).split(",")
}

#-------------------Constants---------------------------
let BLOCK = "block"
let UNBLOCK = "unblock"
let UPDATE = "update"

#-------------------Keys---------------------------------
#------This contract----------
let IsBlockedKey = "is_blocked"
let IsBlockedCallerKey = "is_blocked_caller"
let IsBlockedReasonKey = "is_blocked_reason"
let PriceIndexKey = "price_index"

func getBlackSwarmPriceKey(block: Int) = "black_swarm_price" + "_" + toString(block)
func getPriceHistoryKey(block: Int) = "price_" + toString(block)
func getHeightPriceByIndexKey(index: Int) = PriceIndexKey + "_" + toString(index)

#-------------------Global vars-------------------------
let price = getNumberByKey("price")
let priceIndex = getNumberByKey(PriceIndexKey)
let isBlocked = getBoolByKey(IsBlockedKey)
let isBlockedCaller = getBoolByKey(IsBlockedCallerKey)
let percentPriceOffset = 7

let oraclesList = [fromBase58String("publicA"),
                   fromBase58String("publicB"),
                   fromBase58String("publicC"),
                   fromBase58String("publicD"),
                   fromBase58String("publicE")]

#-------------------Get func----------------------------
func getOracleProvideHeight(ownerPub: ByteVector, height: Int) = getNumberByAddressAndKey(addressFromPublicKey(ownerPub), "price_" + toString(height))
func getPriceHistory(height: Int) = getNumberByKey(getPriceHistoryKey(height))

func findPricesInRange(prices: List[Int]) = {
    let minPercentBound = 90
    let maxPercentBound = 110
    let p0 = prices[0]
    let check0 = if (prices[0] <= 0) then [0] else {
        let p01 = prices[1] * 100 / p0
        let p02 = prices[2] * 100 / p0
        let p03 = prices[3] * 100 / p0
        let p04 = prices[4] * 100 / p0

        let array1 = if(p01 < maxPercentBound && p01 > minPercentBound) then 1::[0] else [0]
        let array2 = if(p02 < maxPercentBound && p02 > minPercentBound) then 2::array1 else array1
        let array3 = if(p03 < maxPercentBound && p03 > minPercentBound) then 3::array2 else array2
        if(p04 < maxPercentBound && p04 > minPercentBound) then 4::array3 else array3
    }

    let check1 = if (check0.size() >= 3) then check0 else {
        let p1 = prices[1]
        if (p1 <= 0) then [1] else {
            let p10 = prices[0] * 100 / p1
            let p12 = prices[2] * 100 / p1
            let p13 = prices[3] * 100 / p1
            let p14 = prices[4] * 100 / p1

            let array1 = if(p10 < maxPercentBound && p10 > minPercentBound) then 0::[1] else [1]
            let array2 = if(p12 < maxPercentBound && p12 > minPercentBound) then 2::array1 else array1
            let array3 = if(p13 < maxPercentBound && p13 > minPercentBound) then 3::array2 else array2
            if(p14 < maxPercentBound && p14 > minPercentBound) then 4::array3 else array3
        }
    }

    let check2 = if (check1.size() >= 3) then check1 else {
        let p2 = prices[2]
        if (p2 <= 0) then [2] else {
            let p20 = prices[0] * 100 / p2
            let p21 = prices[1] * 100 / p2
            let p23 = prices[3] * 100 / p2
            let p24 = prices[4] * 100 / p2

            let array1 = if (p20 < maxPercentBound && p20 > minPercentBound) then 0::[2] else [2]
            let array2 = if(p21 < maxPercentBound && p21 > minPercentBound) then 1::array1 else array1
            let array3 = if(p23 < maxPercentBound && p23 > minPercentBound) then 3::array2 else array2
            if(p24 < maxPercentBound && p24 > minPercentBound) then 4::array3 else array3
        }
    }

    let check3 = if (check2.size() >= 3) then check2 else {
        let p3 = prices[3]
        if (p3 <= 0) then [3] else {
            let p30 = prices[0] * 100 / p3
            let p31 = prices[1] * 100 / p3
            let p32 = prices[2] * 100 / p3
            let p34 = prices[4] * 100 / p3

            let array1 = if (p30 < maxPercentBound && p30 > minPercentBound) then 0::[3] else [3]
            let array2 = if(p31 < maxPercentBound && p31 > minPercentBound) then 1::array1 else array1
            let array3 = if(p32 < maxPercentBound && p32 > minPercentBound) then 2::array2 else array2
            if(p34 < maxPercentBound && p34 > minPercentBound) then 4::array3 else array3
        }
    }

    if (check3.size() >= 3) then check3 else {
        let p4 = prices[4]
        if (p4 <= 0) then [4] else {
            let p40 = prices[0] * 100 / p4
            let p41 = prices[1] * 100 / p4
            let p42 = prices[2] * 100 / p4
            let p43 = prices[3] * 100 / p4

            let array1 = if (p40 < maxPercentBound && p40 > minPercentBound) then 0::[4] else [4]
            let array2 = if(p41 < maxPercentBound && p41 > minPercentBound) then 1::array1 else array1
            let array3 = if(p42 < maxPercentBound && p42 > minPercentBound) then 2::array2 else array2
            if(p43 < maxPercentBound && p43 > minPercentBound) then 3::array3 else array3
        }
    }
}

#-------------------Callable----------------------
# [called by price oracles]
# only price oracles can block smart contract untill another price oracle will unblock it
@Callable(i)
func callEmergencyShutdown(reason: String) = {
    let AutoEmergencyOracleAddress = "3P7ihFVxBNbHK237TNdPxT1xHEu8pHexXTr"
    let callerAddress = toString(i.caller)
    if (AutoEmergencyOracleAddress != callerAddress)
        then throw("caller must be one an emergency oracle")
    else
        WriteSet([
            DataEntry(IsBlockedKey, true),
            DataEntry(IsBlockedCallerKey, callerAddress),
            DataEntry(IsBlockedReasonKey, reason)
        ])
}

# [called by price oracles]
@Callable(i)
func finalizeCurrentPrice() = {
    if(isBlocked) then throw("contract is blocked by EMERGENCY SHUTDOWN actions untill reactivation by emergency oracles") else
    if(getPriceHistory(height) != 0) then throw("wait next block") else

    let prices = [
        getOracleProvideHeight(oraclesList[0], height),
        getOracleProvideHeight(oraclesList[1], height),
        getOracleProvideHeight(oraclesList[2], height),
        getOracleProvideHeight(oraclesList[3], height),
        getOracleProvideHeight(oraclesList[4], height)
    ]

    let pricesInRange = findPricesInRange(prices)
    let priceProvidingCount = pricesInRange.size();

    if (priceProvidingCount < 3) then throw("Could not finalize price because of big variation: height=" + toString(height)
             + "\n" + toBase58String(oraclesList[0]) + "=" + toString(prices[0])
             + "\n" + toBase58String(oraclesList[1]) + "=" + toString(prices[1])
             + "\n" + toBase58String(oraclesList[2]) + "=" + toString(prices[2])
             + "\n" + toBase58String(oraclesList[3]) + "=" + toString(prices[3])
             + "\n" + toBase58String(oraclesList[4]) + "=" + toString(prices[4])) else

    let sum1 = prices[pricesInRange[0]] + prices[pricesInRange[1]] + prices[pricesInRange[2]]
    let sum2 = if (priceProvidingCount >= 4) then sum1 + prices[pricesInRange[3]] else sum1
    let priceSum = if (priceProvidingCount >= 5) then sum2 + prices[pricesInRange[4]] else sum2
    if (priceProvidingCount >= 6) then throw("Invalid pricesInRange creation") else

    let newPrice = priceSum/priceProvidingCount

    if(newPrice >= (price + price*percentPriceOffset/100) || newPrice <= (price - price*percentPriceOffset/100)) then {
        WriteSet([
            DataEntry(IsBlockedKey, true),
            DataEntry(getBlackSwarmPriceKey(height), newPrice)
        ])
    }
    else {
        let newPriceIndex = priceIndex + 1
        WriteSet([
            DataEntry("price", newPrice),
            DataEntry(getPriceHistoryKey(height), newPrice),
            DataEntry(PriceIndexKey, newPriceIndex),
            DataEntry(getHeightPriceByIndexKey(newPriceIndex), height)
        ])
    }
}

@Verifier(tx)
func verify() = {
    let pubKeyAdminsList = [
        "BLEoguzPVKVTfXxxT3W7Rqf8aUm2ggC9Vemd2MQawM2G",
        "FWVffYr2ALmHMejZm3WqeLz6Sdym3gLFGtJn4KTwyU5x",
        "3Wh2LaWcb5gg7K2pPcW3Ep6EAuRBzYkAgrdpt43jTDFa",
        "5WRXFSjwcTbNfKcJs8ZqXmSSWYsSVJUtMvMqZj5hH4Nc"
    ]
    let count =
        (if(sigVerify(tx.bodyBytes, tx.proofs[0], fromBase58String(pubKeyAdminsList[0]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[1], fromBase58String(pubKeyAdminsList[1]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[2], fromBase58String(pubKeyAdminsList[2]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[3], fromBase58String(pubKeyAdminsList[3]))) then 2 else 0)

    count >= 3
}
