{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

#base function
func getNumberByKey(key: String) = {
    match getInteger(this, key) {
            case a:Int => a
            case _ => 0
    }
}
func getStringByKey(key: String) = {
    match getString(this, key) {
            case a:String => a
            case _ => ""
    }
}
func getStringByAddressAndKey(address: Address, key: String) = {
   match getString(address, key) {
            case a:String => a
            case _ => ""
    }
}
func getNumberByAddressAndKey(address: Address, key: String) = {
    match getInteger(address, key) {
            case a:Int => a
            case _ => 0
    }
}
#end base function

# consts
let ORDERSPLITSYMBOL = "_"
let PAULI = 100
let CANCELED = "canceled"
let NEW = "new"
let FILLED = "filled"
#end consts

# keys
let OrderBookKey = "orderbook"
let OrderPriceKey = "order_price_" 
let OrderTotalKey = "order_total_" 
let OrderFilledTotalKey = "order_filled_total_" 
let OrderOwnerKey = "order_owner_"
let OrderHeightKey = "order_height_"
let OrderStatusKey = "order_status_"
let PriceKey = "price"
let BondAssetIdKey = "bond_asset_id"
let NeutrinoAssetIdKey = "neutrino_asset_id"
let NeutrinoContractKey = "neutrino_contract"
let OrderHistoryKey = "order_history_"

func getOrderPriceKey(orderId: String) = OrderPriceKey + orderId
func getOrderTotalKey(orderId: String) = OrderTotalKey + orderId
func getOrderOwnerKey(orderId: String) = OrderOwnerKey + orderId
func getOrderHeightKey(orderId: String) = OrderHeightKey + orderId
func getOrderStatusKey(orderId: String) = OrderStatusKey + orderId
func getOrderFilledTotalKey(orderId: String) = OrderFilledTotalKey + orderId
func getOrderHistoryKey(height: Int) = OrderHistoryKey + toString(height)
#end keys

# global vars
let neutrinoContract = addressFromStringValue(getStringByKey(NeutrinoContractKey))
let controlContract = addressFromStringValue(getStringByAddressAndKey(neutrinoContract, NeutrinoContractKey))
let priceNeutrino = getNumberByAddressAndKey(controlContract, PriceKey)
let neutrinoAssetId = fromBase58String(getStringByAddressAndKey(neutrinoContract, NeutrinoAssetIdKey))
let bondAssetId = fromBase58String(getStringByAddressAndKey(neutrinoContract, BondAssetIdKey))
let orderbook = getStringByKey(OrderBookKey)
let reserve = wavesBalance(neutrinoContract)
let neutrinoSupply = {
    let info = extract(assetInfo(neutrinoAssetId))
    info.quantity - assetBalance(neutrinoContract, neutrinoAssetId)
}
#end global vars

# get func
func getOrderPrice(id : String) = getNumberByKey(getOrderPriceKey(id))
func getOrderTotal(id : String) = getNumberByKey(getOrderTotalKey(id))
func getOrderOwner(id : String) = getStringByKey(getOrderOwnerKey(id))
func getOrderStatus(id : String) = getStringByKey(getOrderStatusKey(id))
func getOrderFilledTotal(id : String) = getNumberByKey(getOrderFilledTotalKey(id))
#end get func

func getOrderElementById(id : String) = id + ORDERSPLITSYMBOL
func addOrder(orderId: String, position: Int) = {
    let orders = orderbook.split(ORDERSPLITSYMBOL)
    let newOrder = getOrderElementById(orderId)
    if(position == 0) 
        then newOrder + orderbook 
    else if(position >= size(orders) - 1) 
        then orderbook + newOrder 
    else {
        let parts = orderbook.split(getOrderElementById(orders[position]))
        parts[0] + newOrder + getOrderElementById(orders[position]) + parts[1]
    }
}
func dropOrder(orderId: String) = {
    let parts = orderbook.split(getOrderElementById(orderId))
    parts[0] + parts[1]
}

#-------------------Callable----------------------

@Callable(i)
func setOrder(price : Int, position: Int) = {
    let pmt = extract(i.payment);
    let newOrderId = toBase58String(keccak256(toBytes(price) + toBytes(pmt.amount) + i.caller.bytes + toBytes(height)))

    if (pmt.assetId != neutrinoAssetId) 
        then throw("can use neutrino only")
    else if(price <= 0)
        then throw("price less zero")
    else if(getOrderOwner(newOrderId) != "")
        then throw("order exists")
    else {
        let orders = orderbook.split(ORDERSPLITSYMBOL)

        let nextOrderId = if(position == 0) then "" else orders[position-1];
        let nextOrderPrice = getOrderPrice(nextOrderId)
        let isNextOrderError = if(nextOrderId != "" && price > nextOrderPrice) then true else false;
        
        let prevOrderId = orders[position];
        let prevOrderPrice = getOrderPrice(prevOrderId)
        let isPrevOrderError = if(price <= prevOrderPrice) then true else false;
        
        if (isNextOrderError || isPrevOrderError)
            then throw("invalid order isPrevOrderError:" + toString(isPrevOrderError) + " isNextOrderError:" + toString(isNextOrderError))
        else
            WriteSet([
                DataEntry(OrderBookKey, addOrder(newOrderId, position)),

                DataEntry(getOrderPriceKey(newOrderId), price),
                DataEntry(getOrderTotalKey(newOrderId), pmt.amount),
                DataEntry(getOrderOwnerKey(newOrderId), toString(i.caller)),
                DataEntry(getOrderHeightKey(newOrderId), height),
                DataEntry(getOrderStatusKey(newOrderId), NEW)
            ])
    }
}

@Callable(i)
func cancelOrder(orderId : String) = {
    let owner = getOrderOwner(orderId)
    let amount = getOrderTotal(orderId) - getOrderFilledTotal(orderId)
    if(owner != toString(i.caller)) 
        then throw("permission denied")
    else {
        ScriptResult(
            WriteSet([
                DataEntry(OrderBookKey, dropOrder(orderId)),

                DataEntry(getOrderStatusKey(orderId), CANCELED)
            ]), 
            TransferSet([
                ScriptTransfer(i.caller, amount, neutrinoAssetId)
            ])
        )
    }
}

@Callable(i)
func executeOrder() = {
    let bondBalance = assetBalance(this, bondAssetId)
    let deficit = (neutrinoSupply - reserve*priceNeutrino/100)/PAULI
    let deficitPositive = if(deficit <= 0) then 0 else deficit
    let bondAmount = if(deficitPositive >= bondBalance) then bondBalance else deficitPositive
    let returnAmount = if(deficitPositive >= bondBalance) then 0 else bondBalance-deficitPositive

    if(bondAmount == 0) then {
        TransferSet([
            ScriptTransfer(neutrinoContract, returnAmount, bondAssetId)
        ])
    }
    else {
        let orderId = orderbook.split(ORDERSPLITSYMBOL)[0]
        let filledTotal = getOrderFilledTotal(orderId)
        let orderTotal = getOrderTotal(orderId)
        let orderPrice = getOrderPrice(orderId)
        let orderOwner = getOrderOwner(orderId)
        let amount = (orderTotal-filledTotal)*100/orderPrice/PAULI;
    
        let newOrderbook = if(bondAmount >= amount) then dropOrder(orderId) else orderbook
        let filledAmount = if(bondAmount >= amount) then amount else bondAmount

        let total = filledAmount*orderPrice/100*PAULI;

        let status = if(bondAmount >= amount) then FILLED else NEW

        ScriptResult(
            WriteSet([
                DataEntry(OrderBookKey, newOrderbook),
                DataEntry(getOrderFilledTotalKey(orderId), filledTotal + total),
                DataEntry(getOrderStatusKey(orderId), status),
                DataEntry(getOrderHistoryKey(height), orderPrice)
            ]), 
            TransferSet([
                ScriptTransfer(addressFromStringValue(orderOwner), filledAmount, bondAssetId),
                ScriptTransfer(neutrinoContract, total, neutrinoAssetId)
            ])
        )
    }
}