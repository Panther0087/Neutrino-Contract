{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

# base functionW

func getNumberByKey(key: String) = {
    match getInteger(this, key) {
            case a:Int => a
            case _ => 0
    }
}
func getStringByKey(key: String) = {
    match getString(this, key) {
            case a:String => a
            case _ => ""
    }
}

#end base function

let JsonKeySymbol = "\""
let a = 0
let JsonKeyValueSymbol = ":"
let JsonObjectSymbol = ","

@Callable(i)
func get(json: String, key: String) = {
    let keySplit = JsonKeySymbol + key + JsonKeySymbol + JsonKeyValueSymbol
    let data = json.split(keySplit)
    let newJson = json.drop(size(data[0]) + size(keySplit))
    #validate level
    if(data[1].take(1) == "{") then {
        let closeElements = newJson.split("}")
        let sizeCloseElements = size(closeElements)
        let firstClosePart = closeElements[sizeCloseElements-2]
        let secondClosePart = closeElements[sizeCloseElements-3]
        let dropCount = if(size(firstClosePart) == 0) then 0 else size(firstClosePart) + if(size(secondClosePart) == 0) then 0 else size(secondClosePart)
        let result = newJson.dropRight(dropCount + 1)
        WriteSet([DataEntry("json", result)])
    }
    else WriteSet([DataEntry("json", newJson)]) 
}